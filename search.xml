<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/19/hello-world/"/>
      <url>/2022/07/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>勾股定理</p><script type="math/tex; mode=display">a^2+b^2=c^2</script><p>..</p><p>$a^2+b^2=c^2$</p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈珂朵莉树(ODT)</title>
      <link href="/2022/07/16/qian-tan-ke-duo-li-shu-odt/"/>
      <url>/2022/07/16/qian-tan-ke-duo-li-shu-odt/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>珂学家狂喜（</p><HR><h1 id="一、珂朵莉树来源"><a href="#一、珂朵莉树来源" class="headerlink" title="一、珂朵莉树来源"></a>一、珂朵莉树来源</h1><p><strong>珂朵莉树</strong>，原名老司机树（Old Driver Tree），在某场CF比赛中提出</p><p>因为题目背景是《末日时在做什么？有没有空？可以来拯救吗？》中的珂朵莉，所以就叫珂朵莉树了</p><HR><h1 id="二、珂朵莉树"><a href="#二、珂朵莉树" class="headerlink" title="二、珂朵莉树"></a>二、珂朵莉树</h1><p>题目链接：<a href="https://www.luogu.com.cn/problem/CF896C">CF896C Willem, Chtholly and Seniorious</a></p><p>题目要求维护一种数据结构，支持以下操作</p><ol><li>将 $[l,r]$ 区间内所有数加上 $x$ </li><li><p><strong>将 $[l,r]$ 区间内所有数改成 $x$</strong></p></li><li><p>求 $[l,r]$ 区间第 $k$ 小的数</p></li><li>求 $[l,r]$ 区间内所有数的 $x$ 次方的和取模 $y$ </li></ol><p>值得注意的是，数据为<strong>随机数据</strong>，说明没有故意构造卡的数据</p><h2 id="1-珂朵莉树有什么用？"><a href="#1-珂朵莉树有什么用？" class="headerlink" title="1.珂朵莉树有什么用？"></a>1.珂朵莉树有什么用？</h2><p>最主要的就是<strong>区间内的推平操作</strong>了，即本题中的操作 $2$ </p><p>当然还有别的操作，那就不是最主要的了</p><h2 id="2-原理是什么？"><a href="#2-原理是什么？" class="headerlink" title="2.原理是什么？"></a>2.原理是什么？</h2><p>写在前面：这个数据结构唯一前置知识就只有<code>set</code></p><h3 id="a-存储"><a href="#a-存储" class="headerlink" title="a.存储"></a>a.存储</h3><p>我们可以把区间看作若干个结点，每个结点都有自己的左端点 $l$ 、右端点 $r$ 以及值 $v$ </p><p>显然，一开始的时候每个结点的 $l=r=idx$ ， $idx$ 指该元素在数组中的下标 </p><p>我们可以把这些结点按左端点顺序存储在一个<code>set</code>里</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span> <span class="token comment">// 左、右端点</span><span class="token keyword">mutable</span> <span class="token keyword">int</span> v<span class="token punctuation">;</span> <span class="token comment">// 值</span><span class="token keyword">const</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span>o<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> l<span class="token operator">&lt;</span>o<span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意 <code>int v</code>前的关键字 <code>mutable</code>，这个关键字和<code>const</code>恰好相反，意思是使<code>v</code>始终允许修改，即使它是个常量</p><p>那么我们为什么要多次一举呢？过会再说（</p><h3 id="b-分割结点"><a href="#b-分割结点" class="headerlink" title="b.分割结点"></a>b.分割结点</h3><p>显然每次推平操作并不能保证区间左、右端点恰好就在一个结点上，因此我们还需要<strong>对结点进行分割</strong></p><p>考虑查找一个结点，使得其左端点恰好为 $pos$ ，$pos$ 指某次操作中的一个分割点</p><p>我们可以用<code>set</code>中的<code>lower_bound()</code>函数来找到第一个左端点大于等于 $pos$ 的结点</p><p>（注：因为我们是按左端点顺序排序的）</p><p>这个<code>lower_bound()</code>会返回一个<code>set</code>的<strong>常量</strong>迭代器</p><p>现在我们找到了一个结点，那么会出现以下三种情况</p><p><strong>第一种情况</strong>： $pos$ 恰好为一个结点的左端点，直接返回这个端点的迭代器（显然前提是这个结点不是<code>s.end()</code>）</p><p>那么其他情况得到的这个结点的左端点<strong>一定</strong>比 $pos$ 大</p><p>因此可以尝试分割前一个结点，即把迭代器<code>it--</code></p><p><strong>第二种情况</strong>：这个结点的右端点小于 $pos$ ，由于结点的端点一定是连续的，说明 $pos$ 是新加入的结点，直接 <code>return s.end()</code></p><p><strong>第三种情况</strong>：最普遍的情况，找到了一个结点恰好包含 $pos$ ，因为我们要的是以 $pos$ 为左端点的结点，显然我们要把这个结点分割成 $node\{l,pos-1,v\}$ 和 $node\{pos,r,v\}$</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator <span class="token function">split</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>pos<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">!=</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>it<span class="token operator">-></span>l<span class="token operator">==</span>pos<span class="token punctuation">)</span><span class="token keyword">return</span> it<span class="token punctuation">;</span> <span class="token comment">// 情况1</span>it<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">-></span>r<span class="token operator">&lt;</span>pos<span class="token punctuation">)</span><span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 情况2</span>R <span class="token keyword">int</span> l<span class="token operator">=</span>it<span class="token operator">-></span>l<span class="token punctuation">,</span>r<span class="token operator">=</span>it<span class="token operator">-></span>r<span class="token punctuation">,</span>v<span class="token operator">=</span>it<span class="token operator">-></span>v<span class="token punctuation">;</span> <span class="token comment">// 情况3</span>s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>l<span class="token punctuation">,</span>pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>v<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>pos<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>     <span class="token comment">// insert函数的返回值是pair类型的，而它的first恰好使我们需要的（新插入结点的指针）</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="c-推平"><a href="#c-推平" class="headerlink" title="c.推平"></a>c.推平</h3><p>解决了区间的端点问题，我们只要获取要求修改区间左、右端点的结点，把这一段删除，再插入要求赋的值和修改区间的左、右端点作为新的结点</p><p><strong>注意</strong>一定要先找右端点所在结点，再找左端点所在结点</p><p>为什么？因为我们再分割结点时大概率删除了部分结点，并加入新的结点，如果我们先找左端点所在结点，再找右端点所在结点，很有左端点所在结点的迭代器已经失效了</p><p>例如有一个结点 $node\{l=1,r=5\}$ ，修改区间的左端点为 $1$ ，右端点为 $3$</p><p>按先左再右的顺序，我们先会得到左端点所在结点</p><p>$node\{l=1,r=5\}$</p><p>显然如果我们找右端点所在结点，会将左端点所在结点进行分割，那么原来的结点就没了，迭代器失效，然后RE</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">assign</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> l<span class="token punctuation">,</span>R <span class="token keyword">int</span> r<span class="token punctuation">,</span>R <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itr<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>itl<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 找结点</span>s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>itl<span class="token punctuation">,</span>itr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删掉[itl,itr)中所有结点</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>k<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 插入新结点</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="d-剩余操作"><a href="#d-剩余操作" class="headerlink" title="d.剩余操作"></a>d.剩余操作</h3><p><strong>区间加</strong>，十分暴力，十分简单，我们只要找到左、右端点所在结点，然后直接把每个结点修改就行</p><p>现在知道为什么要写<code>mutable</code>了吧！因为<code>split()</code>返回的是<strong>常量</strong>迭代器</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> l<span class="token punctuation">,</span>R <span class="token keyword">int</span> r<span class="token punctuation">,</span>R <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itr<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>itl<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>R set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>itl<span class="token punctuation">;</span> it<span class="token operator">!=</span>itr<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>it<span class="token operator">-></span>v<span class="token operator">+=</span>k<span class="token punctuation">;</span> <span class="token comment">// 直接加</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>区间第 $k$ 小数</strong>，我们只要把区间内的所有结点取出来从大到小排序即可</p><p>注意每个结点指代的可能是一段区间，而我们要求的是第 $k$ 小的数，因此每遍历一个结点，如果 $k$ 大于该结点指代的区间长，则让 $k$ 减去该结点指代的区间长，否则第 $k$ 小的数就在该结点区间内，直接输出即可</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Rank</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> num<span class="token punctuation">,</span>cnt<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Rank <span class="token operator">&amp;</span>o<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> num<span class="token operator">&lt;</span>o<span class="token punctuation">.</span>num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">rnk</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> l<span class="token punctuation">,</span>R <span class="token keyword">int</span> r<span class="token punctuation">,</span>R <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itr<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>itl<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Rank<span class="token operator">></span> v<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>R set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>itl<span class="token punctuation">;</span> it<span class="token operator">!=</span>itr<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>it<span class="token operator">-></span>v<span class="token punctuation">,</span>it<span class="token operator">-></span>r <span class="token operator">-</span> it<span class="token operator">-></span>l <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 记录结点</span><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token operator">&lt;</span>k<span class="token punctuation">)</span>k<span class="token operator">-=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token punctuation">;</span> <span class="token comment">// 减去区间长</span><span class="token keyword">else</span> <span class="token keyword">return</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 这句显然在数据合法时没有任何用</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>区间求和</strong>，只要遍历一下，加一下乘一下取模一下就好</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> l<span class="token punctuation">,</span>R <span class="token keyword">int</span> r<span class="token punctuation">,</span>R <span class="token keyword">int</span> x<span class="token punctuation">,</span>R <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>R <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itr<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>itl<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>itl<span class="token punctuation">;</span> it<span class="token operator">!=</span>itr<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">%</span>y<span class="token operator">+</span><span class="token function">qpow</span><span class="token punctuation">(</span>it<span class="token operator">-></span>v<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">%</span>y<span class="token operator">*</span><span class="token punctuation">(</span>it<span class="token operator">-></span>r<span class="token operator">-</span>it<span class="token operator">-></span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>y<span class="token punctuation">)</span><span class="token operator">%</span>y<span class="token punctuation">;</span> <span class="token comment">// 快速幂qpow()就不贴了</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-复杂度分析"><a href="#3-复杂度分析" class="headerlink" title="3.复杂度分析"></a>3.复杂度分析</h2><p><code>set</code>实现的珂朵莉树复杂度为 $O(n\log^2n)$</p><p>不过本人不是很会分析，<a href="https://zhuanlan.zhihu.com/p/102786071">这篇文章</a>分析证明的很好，大家可以看看</p><p>完整代码 （注：原题的随机数据是给定 $seed$ 等自行生成）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R</span> <span class="token expression"><span class="token keyword">register</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">mod</span> <span class="token expression"><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXN</span> <span class="token expression"><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span></span></span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>seed<span class="token punctuation">,</span>vmax<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">qpow</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> a<span class="token punctuation">,</span>R <span class="token keyword">int</span> b<span class="token punctuation">,</span>R <span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>R <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>base<span class="token operator">=</span>a<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">%</span>p<span class="token operator">*</span>base<span class="token operator">%</span>p<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span>base<span class="token operator">=</span><span class="token punctuation">(</span>base<span class="token operator">%</span>p<span class="token operator">*</span>base<span class="token operator">%</span>p<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span>b<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ans<span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token keyword">mutable</span> <span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span>o<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> l<span class="token operator">&lt;</span>o<span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">rnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>R <span class="token keyword">int</span> ret<span class="token operator">=</span>seed<span class="token punctuation">;</span>seed<span class="token operator">=</span><span class="token punctuation">(</span>seed<span class="token operator">*</span><span class="token number">7</span><span class="token operator">+</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span> s<span class="token punctuation">;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator <span class="token function">split</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>pos<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">!=</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>it<span class="token operator">-></span>l<span class="token operator">==</span>pos<span class="token punctuation">)</span> <span class="token keyword">return</span> it<span class="token punctuation">;</span>it<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">-></span>r<span class="token operator">&lt;</span>pos<span class="token punctuation">)</span><span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>R <span class="token keyword">int</span> l<span class="token operator">=</span>it<span class="token operator">-></span>l<span class="token punctuation">,</span>r<span class="token operator">=</span>it<span class="token operator">-></span>r<span class="token punctuation">,</span>v<span class="token operator">=</span>it<span class="token operator">-></span>v<span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>l<span class="token punctuation">,</span>pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>v<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>pos<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> l<span class="token punctuation">,</span>R <span class="token keyword">int</span> r<span class="token punctuation">,</span>R <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itr<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>itl<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>R set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>itl<span class="token punctuation">;</span> it<span class="token operator">!=</span>itr<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>it<span class="token operator">-></span>v<span class="token operator">+=</span>k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">assign</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> l<span class="token punctuation">,</span>R <span class="token keyword">int</span> r<span class="token punctuation">,</span>R <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itr<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>itl<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>itl<span class="token punctuation">,</span>itr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[itl,itr)</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>k<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">Rank</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> num<span class="token punctuation">,</span>cnt<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Rank <span class="token operator">&amp;</span>o<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> num<span class="token operator">&lt;</span>o<span class="token punctuation">.</span>num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">rnk</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> l<span class="token punctuation">,</span>R <span class="token keyword">int</span> r<span class="token punctuation">,</span>R <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itr<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>itl<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Rank<span class="token operator">></span> v<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>R set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>itl<span class="token punctuation">;</span> it<span class="token operator">!=</span>itr<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>it<span class="token operator">-></span>v<span class="token punctuation">,</span>it<span class="token operator">-></span>r <span class="token operator">-</span> it<span class="token operator">-></span>l <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token operator">&lt;</span>k<span class="token punctuation">)</span>k<span class="token operator">-=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">return</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> l<span class="token punctuation">,</span>R <span class="token keyword">int</span> r<span class="token punctuation">,</span>R <span class="token keyword">int</span> x<span class="token punctuation">,</span>R <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>R <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itr<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>itl<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>itl<span class="token punctuation">;</span> it<span class="token operator">!=</span>itr<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">%</span>y<span class="token operator">+</span><span class="token function">qpow</span><span class="token punctuation">(</span>it<span class="token operator">-></span>v<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">%</span>y<span class="token operator">*</span><span class="token punctuation">(</span>it<span class="token operator">-></span>r<span class="token operator">-</span>it<span class="token operator">-></span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>y<span class="token punctuation">)</span><span class="token operator">%</span>y<span class="token punctuation">;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld%lld%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>seed<span class="token punctuation">,</span><span class="token operator">&amp;</span>vmax<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>vmax<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span>i<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>R <span class="token keyword">int</span> op<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>op<span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>l<span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>r<span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">></span>r<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x<span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>x<span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>vmax<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>y<span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>vmax<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">assign</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">rnk</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/**在太阳西斜的这个世界里，置身天上之森，*等这场战争结束之后，不归之人与望眼欲穿的人们，*人人本着正义之名，长存不灭的过去，逐渐消逝的未来，*我回来了，纵使日薄西山，即便看不到未来，*此时此刻的光辉，盼君勿忘**————世上最幸福的女孩*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><HR><h1 id="三、珂朵莉树例题"><a href="#三、珂朵莉树例题" class="headerlink" title="三、珂朵莉树例题"></a>三、珂朵莉树例题</h1><p>（注：都是洛谷上的题~）</p><h2 id="1-P4979-矿洞：坍塌"><a href="#1-P4979-矿洞：坍塌" class="headerlink" title="1.P4979 矿洞：坍塌"></a>1.P4979 矿洞：坍塌</h2><p>题目链接：<a href="https://www.luogu.com.cn/problem/P4979">P4979 矿洞：坍塌</a></p><blockquote><p><strong>题意</strong>：要求维护一个数据结构，支持对给定字符串进行如下操作</p><p><code>A x y op</code>表示替换材料，将 $x$ 到 $y(1\le x\le y\le N)$<br>区间内的材料替换为<code>op</code>，<code>op</code>为$A,B,C$ 三种材料字符中的一个</p><p><code>B x y</code>表示是否询问，即询问 $x$ 到 $y(1\le x\le y\le<br>N)$区间内的材料是否合法，合法输出<code>Yes</code>，不合法输出<code>No</code></p></blockquote><p>合法指该区间连续且材料相等，并且该区间前一个和后一个材料不相同</p><p>几乎是板子题，没什么特别的，只要跟题目意思写查询操作就行</p><p>不过要注意的是，出题人卡了<strong>无优化的ODT</strong></p><p>那么怎么优化呢？我们只要在每次查询时<strong>将相同值的相邻结点合并</strong>即可</p><p>代码如下</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R</span> <span class="token expression"><span class="token keyword">register</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXN</span> <span class="token expression"><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span></span></span><span class="token keyword">int</span> n<span class="token punctuation">,</span>Q<span class="token punctuation">;</span><span class="token keyword">char</span> a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token keyword">mutable</span> <span class="token keyword">char</span> v<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span>o<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> l<span class="token operator">&lt;</span>o<span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span>s<span class="token punctuation">;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator <span class="token function">split</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>pos<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">!=</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>it<span class="token operator">-></span>l<span class="token operator">==</span>pos<span class="token punctuation">)</span><span class="token keyword">return</span> it<span class="token punctuation">;</span>it<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">-></span>r<span class="token operator">&lt;</span>pos<span class="token punctuation">)</span><span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>R <span class="token keyword">int</span> l<span class="token operator">=</span>it<span class="token operator">-></span>l<span class="token punctuation">,</span>r<span class="token operator">=</span>it<span class="token operator">-></span>r<span class="token punctuation">;</span>R <span class="token keyword">char</span> v<span class="token operator">=</span>it<span class="token operator">-></span>v<span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>l<span class="token punctuation">,</span>pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>v<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>pos<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">assign</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> l<span class="token punctuation">,</span>R <span class="token keyword">int</span> r<span class="token punctuation">,</span>R <span class="token keyword">char</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itr<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>itl<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>itl<span class="token punctuation">,</span>itr<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>k<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> l<span class="token punctuation">,</span>R <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itr<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>itl<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">!=</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>itl<span class="token punctuation">,</span>last<span class="token operator">=</span>itl<span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>itr<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">,</span>last<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">-></span>v<span class="token operator">!=</span>last<span class="token operator">-></span>v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>R <span class="token keyword">int</span> _l<span class="token operator">=</span>itl<span class="token operator">-></span>l<span class="token punctuation">,</span>_r<span class="token operator">=</span>last<span class="token operator">-></span>r<span class="token punctuation">;</span>R <span class="token keyword">char</span> _v<span class="token operator">=</span>last<span class="token operator">-></span>v<span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>itl<span class="token punctuation">,</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>_l<span class="token punctuation">,</span>_r<span class="token punctuation">,</span>_v<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>R <span class="token keyword">char</span> _v<span class="token operator">=</span>itl<span class="token operator">-></span>v<span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>itl<span class="token punctuation">,</span>itr<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>_v<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>r<span class="token operator">==</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator ib<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ia<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ia<span class="token operator">-></span>v<span class="token operator">!=</span>ib<span class="token operator">-></span>v<span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">"Yes"</span><span class="token operator">:</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %s\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>R <span class="token keyword">int</span> l<span class="token operator">=</span>i<span class="token punctuation">,</span>r<span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>r<span class="token operator">=</span><span class="token operator">++</span>i<span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token operator">--</span>i<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>Q<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>R <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span>R <span class="token keyword">char</span> op<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token char">'A'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld %c\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assign</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">query</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-P5350-序列"><a href="#2-P5350-序列" class="headerlink" title="2.P5350 序列"></a>2.P5350 序列</h2><p>题目链接：<a href="https://www.luogu.com.cn/problem/P5350">P5350 序列</a></p><blockquote><p><strong>题意</strong>：要求维护一个数据结构，支持对给定数组进行以下操作</p><p><code>1 l r</code>求 $[l,r]$ 的区间和</p><p><code>2 l r v</code>将 $[l,r]$ 赋值为 $v$</p><p><code>3 l r v</code>将 $[l,r]$ 加上 $v$</p><p><code>4 l1 r1 l2 r2</code>将 $[l_1,r_1]$ 复制到 $[l_2,r_2]$ </p><p><code>5 l1 r1 l2 r2</code>将 $[l_1,r_1]$  和 $[l_2,r_2]$ 交换</p><p><code>6 l r</code>将 $[l,r]$翻转</p></blockquote><p><del>我直呼神仙题</del></p><p>本题前三个操作就是基本操作</p><p>后三个操作值得探讨</p><p><strong>首先是将 $[l1,r1]$ 中所有数复制到 $[l2,r2]$</strong></p><p>我们可以把 $[l1,r1]$ 中所有结点记录，然后直接用这些结点推平 $[l2,r2]$ </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">THR</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> l1<span class="token punctuation">,</span>R <span class="token keyword">int</span> r1<span class="token punctuation">,</span>R <span class="token keyword">int</span> l2<span class="token punctuation">,</span>R <span class="token keyword">int</span> r2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itr<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>itl<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>THR<span class="token operator">></span>vec<span class="token punctuation">;</span>R <span class="token keyword">int</span> tmp<span class="token operator">=</span>l2<span class="token operator">-</span>l1<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>itl<span class="token punctuation">;</span> it<span class="token operator">!=</span>itr<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>it<span class="token operator">-></span>l<span class="token operator">+</span>tmp<span class="token punctuation">,</span>it<span class="token operator">-></span>r<span class="token operator">+</span>tmp<span class="token punctuation">,</span>it<span class="token operator">-></span>v<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">assign</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>其次是将 $[l1,r1]$ 和 $[l2,r2]$ 交换</strong></p><p>我比较懒，直接把 $[l1,r1]$ 复制到 $[n+1,n+r1-l1+1]$</p><p>然后就像当年 <code>int c=a;a=b;b=c;</code>一样交换就行了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> l1<span class="token punctuation">,</span>R <span class="token keyword">int</span> r1<span class="token punctuation">,</span>R <span class="token keyword">int</span> l2<span class="token punctuation">,</span>R <span class="token keyword">int</span> r2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">copy</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>r1<span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span>r1<span class="token operator">-</span>l1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">copy</span><span class="token punctuation">(</span>l2<span class="token punctuation">,</span>r2<span class="token punctuation">,</span>l1<span class="token punctuation">,</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">copy</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span>r1<span class="token operator">-</span>l1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>l2<span class="token punctuation">,</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>最后是区间翻转操作</strong></p><p>这个不难，记录每个结点，然后改下左右端点插入就好</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">rev</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> l<span class="token punctuation">,</span>R <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itr<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>itl<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>THR<span class="token operator">></span>vec<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>itl<span class="token punctuation">;</span> it<span class="token operator">!=</span>itr<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>it<span class="token operator">-></span>l<span class="token punctuation">,</span>it<span class="token operator">-></span>r<span class="token punctuation">,</span>it<span class="token operator">-></span>v<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>R <span class="token keyword">int</span> cnt<span class="token operator">=</span>r<span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>itl<span class="token punctuation">,</span>itr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>cnt<span class="token operator">-</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">-</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">,</span>cnt<span class="token punctuation">,</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cnt<span class="token operator">-=</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">-</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R</span> <span class="token expression"><span class="token keyword">register</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXN</span> <span class="token expression"><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">mod</span> <span class="token expression"><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span></span></span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span>R T <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>R <span class="token keyword">char</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>R T x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token char">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>ch<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>k<span class="token operator">=</span>x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token keyword">mutable</span> <span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span>o<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> l<span class="token operator">&lt;</span>o<span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span> s<span class="token punctuation">;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator <span class="token function">split</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>pos<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">!=</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>it<span class="token operator">-></span>l<span class="token operator">==</span>pos<span class="token punctuation">)</span><span class="token keyword">return</span> it<span class="token punctuation">;</span>it<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">-></span>r<span class="token operator">&lt;</span>pos<span class="token punctuation">)</span><span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>R <span class="token keyword">int</span> l<span class="token operator">=</span>it<span class="token operator">-></span>l<span class="token punctuation">,</span>r<span class="token operator">=</span>it<span class="token operator">-></span>r<span class="token punctuation">,</span>v<span class="token operator">=</span>it<span class="token operator">-></span>v<span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>l<span class="token punctuation">,</span>pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>v<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>pos<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">assign</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> l<span class="token punctuation">,</span>R <span class="token keyword">int</span> r<span class="token punctuation">,</span>R <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itr<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>itl<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>itl<span class="token punctuation">,</span>itr<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>k<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> l<span class="token punctuation">,</span>R <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>R <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itr<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>itl<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>itl<span class="token punctuation">;</span> it<span class="token operator">!=</span>itr<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span><span class="token punctuation">(</span>it<span class="token operator">-></span>v<span class="token operator">*</span><span class="token punctuation">(</span>it<span class="token operator">-></span>r<span class="token operator">-</span>it<span class="token operator">-></span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">THR</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> l<span class="token punctuation">,</span>R <span class="token keyword">int</span> r<span class="token punctuation">,</span>R <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itr<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>itl<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>itl<span class="token punctuation">;</span> it<span class="token operator">!=</span>itr<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>it<span class="token operator">-></span>v<span class="token operator">=</span><span class="token punctuation">(</span>it<span class="token operator">-></span>v<span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> l1<span class="token punctuation">,</span>R <span class="token keyword">int</span> r1<span class="token punctuation">,</span>R <span class="token keyword">int</span> l2<span class="token punctuation">,</span>R <span class="token keyword">int</span> r2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itr<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>itl<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>THR<span class="token operator">></span>vec<span class="token punctuation">;</span>R <span class="token keyword">int</span> tmp<span class="token operator">=</span>l2<span class="token operator">-</span>l1<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>itl<span class="token punctuation">;</span> it<span class="token operator">!=</span>itr<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>it<span class="token operator">-></span>l<span class="token operator">+</span>tmp<span class="token punctuation">,</span>it<span class="token operator">-></span>r<span class="token operator">+</span>tmp<span class="token punctuation">,</span>it<span class="token operator">-></span>v<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">assign</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">,</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> l1<span class="token punctuation">,</span>R <span class="token keyword">int</span> r1<span class="token punctuation">,</span>R <span class="token keyword">int</span> l2<span class="token punctuation">,</span>R <span class="token keyword">int</span> r2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">copy</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>r1<span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span>r1<span class="token operator">-</span>l1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">copy</span><span class="token punctuation">(</span>l2<span class="token punctuation">,</span>r2<span class="token punctuation">,</span>l1<span class="token punctuation">,</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">copy</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span>r1<span class="token operator">-</span>l1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>l2<span class="token punctuation">,</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">rev</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> l<span class="token punctuation">,</span>R <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itr<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>itl<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>THR<span class="token operator">></span>vec<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>itl<span class="token punctuation">;</span> it<span class="token operator">!=</span>itr<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>it<span class="token operator">-></span>l<span class="token punctuation">,</span>it<span class="token operator">-></span>r<span class="token punctuation">,</span>it<span class="token operator">-></span>v<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>R <span class="token keyword">int</span> cnt<span class="token operator">=</span>r<span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>itl<span class="token punctuation">,</span>itr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>cnt<span class="token operator">-</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">-</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">,</span>cnt<span class="token punctuation">,</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cnt<span class="token operator">-=</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">-</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">read</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">read</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span>i<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>R <span class="token keyword">int</span> op<span class="token punctuation">,</span>l1<span class="token punctuation">,</span>l2<span class="token punctuation">,</span>r1<span class="token punctuation">,</span>r2<span class="token punctuation">,</span>v<span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>r1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 求和</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">read</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assign</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>r1<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 赋值</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">read</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>r1<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 区间加</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">read</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">copy</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>r1<span class="token punctuation">,</span>l2<span class="token punctuation">,</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 复制</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">read</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Swap</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>r1<span class="token punctuation">,</span>l2<span class="token punctuation">,</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 交换</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">rev</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 翻转</span><span class="token punctuation">&#125;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>R <span class="token keyword">int</span> idx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> i<span class="token operator">=</span>it<span class="token operator">-></span>l<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>it<span class="token operator">-></span>r<span class="token operator">&amp;&amp;</span>idx<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> idx<span class="token operator">++</span><span class="token punctuation">,</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld%c"</span><span class="token punctuation">,</span>it<span class="token operator">-></span>v<span class="token punctuation">,</span><span class="token string">" \n"</span><span class="token punctuation">[</span>idx<span class="token operator">==</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-CF343D-Water-Tree"><a href="#3-CF343D-Water-Tree" class="headerlink" title="3.CF343D Water Tree"></a>3.CF343D Water Tree</h2><p>题目链接：<a href="https://www.luogu.com.cn/problem/CF343D">CF343D Water Tree</a></p><blockquote><p><strong>题意</strong>：给出一棵以 $1$ 为根节点的 $n$ 个节点的有根树。每个点有一个权值，初始为 $0$ ，支持以下操作</p><p><code>1 u</code>将点 $u$ 和其子树上的所有节点的权值改为 $1$</p><p><code>2 u</code>将点 $u$ 到 $1$ 的路径上的所有节点的权值改为 $0$</p><p><code>3 u</code>询问 $u$ 的权值</p></blockquote><p>简单的树链剖分+珂朵莉树</p><p>单点查询只要<code>lower_bound()</code>就行了</p><p>代码如下</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R</span> <span class="token expression"><span class="token keyword">register</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXN</span> <span class="token expression"><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span></span></span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> fa<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>son<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>siz<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dep<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>idx<span class="token punctuation">,</span>top<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>id<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span>R T <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>R <span class="token keyword">char</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>R T x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token char">'-'</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>ch<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>k<span class="token operator">=</span>x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">Edge</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>e<span class="token punctuation">[</span>MAXN<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token keyword">mutable</span> <span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span>o<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> l<span class="token operator">&lt;</span>o<span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span> s<span class="token punctuation">;</span><span class="token keyword">int</span> head<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>pos<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator <span class="token function">split</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>pos<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">!=</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>it<span class="token operator">-></span>l<span class="token operator">==</span>pos<span class="token punctuation">)</span><span class="token keyword">return</span> it<span class="token punctuation">;</span><span class="token operator">--</span>it<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">-></span>r<span class="token operator">&lt;</span>pos<span class="token punctuation">)</span><span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>R <span class="token keyword">int</span> l<span class="token operator">=</span>it<span class="token operator">-></span>l<span class="token punctuation">,</span>r<span class="token operator">=</span>it<span class="token operator">-></span>r<span class="token punctuation">,</span>v<span class="token operator">=</span>it<span class="token operator">-></span>v<span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>l<span class="token punctuation">,</span>pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>v<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>pos<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">assign</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> l<span class="token punctuation">,</span>R <span class="token keyword">int</span> r<span class="token punctuation">,</span>R <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itr<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>itl<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>itl<span class="token punctuation">,</span>itr<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>k<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> u<span class="token punctuation">,</span>R <span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>e<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>pos<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> u<span class="token punctuation">,</span>R <span class="token keyword">int</span> f<span class="token punctuation">,</span>R <span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">;</span>fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">;</span>siz<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>R <span class="token keyword">int</span> mx<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> i<span class="token operator">=</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> i<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>R <span class="token keyword">int</span> v<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>f<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>u<span class="token punctuation">,</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>siz<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">+=</span>siz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>siz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">></span>mx<span class="token punctuation">)</span>mx<span class="token operator">=</span>siz<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span>son<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> u<span class="token punctuation">,</span>R <span class="token keyword">int</span> ftop<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>top<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>ftop<span class="token punctuation">;</span>id<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>idx<span class="token punctuation">;</span>a<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>son<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span>son<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span>ftop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> i<span class="token operator">=</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> i<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>R <span class="token keyword">int</span> v<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">==</span>fa<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">||</span>v<span class="token operator">==</span>son<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">upRange</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> x<span class="token punctuation">,</span>R <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span>top<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">!=</span>top<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>top<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>dep<span class="token punctuation">[</span>top<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assign</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span>top<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>id<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x<span class="token operator">=</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>dep<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">></span>dep<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assign</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span>id<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">upSon</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">assign</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span>id<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">+</span>siz<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator pos<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>id<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">||</span>pos<span class="token operator">-></span>l<span class="token operator">></span>id<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">--</span>pos<span class="token punctuation">;</span><span class="token keyword">return</span> pos<span class="token operator">-></span>v<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">read</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>u<span class="token punctuation">,</span>v<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">read</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>R <span class="token keyword">int</span> op<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">upSon</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">upRange</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">query</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-CF915E-Physical-Education-Lessons"><a href="#4-CF915E-Physical-Education-Lessons" class="headerlink" title="4.CF915E Physical Education Lessons"></a>4.CF915E Physical Education Lessons</h2><p>题目链接：<a href="https://www.luogu.com.cn/problem/CF915E">CF915E Physical Education Lessons</a></p><blockquote><p><strong>题意</strong>：区间赋值为 $1$ 或 $0$ ，求 $1$ 个数 （我用 $1$ 表示题目中的工作日）</p></blockquote><p>这题比板子题还要简单</p><p>唯一要注意的是每次输出结果不能去扫一遍（复杂度爆炸），而是在每次修改时统计</p><p>直接贴代码了（</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">int</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">R</span> <span class="token expression"><span class="token keyword">register</span></span></span><span class="token keyword">int</span> n<span class="token punctuation">,</span>Q<span class="token punctuation">,</span>ans<span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span>R T <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>R <span class="token keyword">char</span> ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> R T x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>ch<span class="token operator">^</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ch<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>k<span class="token operator">=</span>x<span class="token operator">*</span>f<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token keyword">mutable</span> <span class="token keyword">int</span> v<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> node <span class="token operator">&amp;</span>o<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> l<span class="token operator">&lt;</span>o<span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span>s<span class="token punctuation">;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator <span class="token function">split</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>pos<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">!=</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>it<span class="token operator">-></span>l<span class="token operator">==</span>pos<span class="token punctuation">)</span><span class="token keyword">return</span> it<span class="token punctuation">;</span><span class="token operator">--</span>it<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">-></span>r<span class="token operator">&lt;</span>pos<span class="token punctuation">)</span><span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>R <span class="token keyword">int</span> l<span class="token operator">=</span>it<span class="token operator">-></span>l<span class="token punctuation">,</span>r<span class="token operator">=</span>it<span class="token operator">-></span>r<span class="token punctuation">,</span>v<span class="token operator">=</span>it<span class="token operator">-></span>v<span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>l<span class="token punctuation">,</span>pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>v<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>pos<span class="token punctuation">,</span>r<span class="token punctuation">,</span>v<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">assign</span><span class="token punctuation">(</span>R <span class="token keyword">int</span> l<span class="token punctuation">,</span>R <span class="token keyword">int</span> r<span class="token punctuation">,</span>R <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator itr<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>itl<span class="token operator">=</span><span class="token function">split</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>set<span class="token operator">&lt;</span>node<span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>itl<span class="token punctuation">;</span> it<span class="token operator">!=</span>itr<span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span>ans<span class="token operator">-=</span>it<span class="token operator">-></span>v<span class="token operator">*</span><span class="token punctuation">(</span>it<span class="token operator">-></span>r<span class="token operator">-</span>it<span class="token operator">-></span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>itl<span class="token punctuation">,</span>itr<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>k<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token operator">+=</span>k<span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">read</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>ans<span class="token operator">=</span>n<span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>Q<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>R <span class="token keyword">int</span> op<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assign</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>op<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><HR><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文简单介绍了珂朵莉树</p><p>顺便讲了几道简单的例题</p><p><strong>转载请说明出处</strong></p><HR><h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h1><p>作为珂学家，怎么能少了这环节呢（</p><p>送上本人找到的<del>高清无水印</del>壁纸一份（</p><p><img src="https://img-blog.csdnimg.cn/5d713a31fec4434c90e57a07f28f463e.jpg?x-oss-process=size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>再来一个（</p><p><img src="https://img-blog.csdnimg.cn/4b150adc70be4456b1f2c69f2c7992d2.png?x-oss-process=size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>如果幸福有颜色的话，那一定是终末之红染尽的蓝色！</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
